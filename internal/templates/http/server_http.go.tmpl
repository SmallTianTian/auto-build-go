package server

import (
	"context"
	"fmt"
	ht "net/http"
	"time"

	"{{.module}}/config"
	"{{.module}}/pkg/logger"
	h "{{.module}}/ui/http"
)

var hi *ht.Server

func RunHttp() {
    addr := fmt.Sprintf(":%d", config.DefaultConfig.Port.Http)
	hi = &ht.Server{Addr: addr, Handler: h.GetServer()}
	go func() {
		logger.Info("Http listen and server at", addr)
		if err := hi.ListenAndServe(); err != nil && err != ht.ErrServerClosed {
			logger.Error("Start http failed.", err)
		}
	}()
}

func StopHttp() {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := hi.Shutdown(ctx); err != nil {
		logger.Error("HTTP shutdown failed.", err)
	}
}