package application

import (
	"context"
	"crypto/tls"
	"fmt"
	"net"

	"go.uber.org/zap"
	"google.golang.org/grpc"
)

func (app *Application) WithGRPC(gs *grpc.Server, port int, cert, certKey string) *Application {
	app.appSrvs = append(app.appSrvs, newGRPCServer(gs, port, cert, certKey))
	return app
}

type grpcServer struct {
	gc   *grpc.Server
	addr string
	cert, certKey string
}

func newGRPCServer(gc *grpc.Server, port int, cert, certKey string) *grpcServer {
	return &grpcServer{
		gc:      gc,
		addr:    fmt.Sprintf(":%d", port),
		cert:    cert,
		certKey: certKey,
	}
}

func (gs *grpcServer) Run(ctx context.Context, log *zap.Logger) error {
	lis, err := net.Listen("tcp", gs.addr)
	if err != nil {
		return err
	}

	if gs.cert != "" && gs.certKey != "" {
		cert, err := tls.LoadX509KeyPair(gs.cert, gs.certKey)
		if err != nil {
			return err
		}
		lis = tls.NewListener(lis, &tls.Config{
			Certificates: []tls.Certificate{cert},
			MinVersion:   tls.VersionTLS12,
		})
		log.Info("Grpc start with tls.", zap.String("addr", gs.addr))
	} else {
		log.Info("Grpc start without tls.", zap.String("addr", gs.addr))
	}

	return gs.gc.Serve(lis)
}

func (gs *grpcServer) Stop(ctx context.Context, log *zap.Logger) {
	gs.gc.Stop()
}
