package application

import (
	"context"
	"fmt"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"go.uber.org/zap"
)

//nolint
func (app *Application) WithProxy(r *runtime.ServeMux, port int, cert, certKey string) *Application { // 强制需要这个类型，用来区分 http
	app.appSrvs = append(app.appSrvs, newProxyServer(r, port, cert, certKey))
	return app
}

type proxyServer struct {
	hs *http.Server
	cert, certKey string
}

func newProxyServer(proxyMux http.Handler, port int, cert, certKey string) *proxyServer {
	hs := &http.Server{
		Addr:    fmt.Sprintf(":%d", port),
		Handler: proxyMux,
	}
	return &proxyServer{
		hs: hs,
		cert:    cert,
		certKey: certKey,
	}
}

func (ps *proxyServer) Run(ctx context.Context, log *zap.Logger) error {
	if ps.cert != "" && ps.certKey != "" {
		log.Info("Grpc proxy start with https.", zap.String("addr", ps.hs.Addr))
		return ps.hs.ListenAndServeTLS("configs/server.crt", "configs/server.key")
	}
	log.Info("Grpc proxy start without https.", zap.String("addr", ps.hs.Addr))
	return ps.hs.ListenAndServe()
}

func (ps *proxyServer) Stop(ctx context.Context, log *zap.Logger) {
	err := ps.hs.Shutdown(ctx)
	if err = handleError(err); err != nil {
		log.Error("Grpc proxy stop failed.", zap.Error(err))
	}
}
