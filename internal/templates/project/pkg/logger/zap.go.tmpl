package logger

import (
	"log"
	"os"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// InitZap init zap as instance.
func InitZap(app, logLevel string, opts ...LogOption) *zap.Logger {
	opt := defaultLogOptions()
	for _, o := range opts {
		o.apply(&opt)
	}

	encoderConfig := zapcore.EncoderConfig{
		TimeKey:        "time",
		LevelKey:       "level",
		NameKey:        "name",
		CallerKey:      "caller",
		MessageKey:     "msg",
		StacktraceKey:  "stacktrace",
		LineEnding:     zapcore.DefaultLineEnding,
		EncodeLevel:    zapcore.LowercaseLevelEncoder, // 小写编码器
		EncodeTime:     zapcore.RFC3339TimeEncoder,    // ISO8601 UTC 时间格式
		EncodeDuration: zapcore.MillisDurationEncoder,
		EncodeCaller:   zapcore.FullCallerEncoder, // 全路径编码器
	}

	l := zapcore.InfoLevel
	if err := l.Set(logLevel); err != nil {
		log.Println("Error parsing log level, using: info")
	}

	writer := os.Stdout
	if opt.logFilePath != "" {
		f, err := os.OpenFile(opt.logFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644) // nolint
		if err != nil {
			log.Fatalln("Open log file failed.", err)
		}
		writer = f
	}

	core := zapcore.NewCore(
		zapcore.NewJSONEncoder(encoderConfig),
		zapcore.AddSync(writer),
		l,
	)

	log := zap.New(core).With(zap.String("app", app))
	zap.ReplaceGlobals(log)

	if opt.replaceGlobal {
		instance = log.Sugar()
	}
	return log
}
