package logger

type Logger interface {
	Debug(args ...interface{})
	Debugf(template string, args ...interface{})
	Error(args ...interface{})
	Errorf(template string, args ...interface{})
	Fatal(args ...interface{})
	Fatalf(template string, args ...interface{})
	Info(args ...interface{})
	Infof(template string, args ...interface{})
	Warn(args ...interface{})
	Warnf(template string, args ...interface{})
}

// NoopLog 空实现，避免没有日志实例时 panic
type NoopLog struct{}

func (nl *NoopLog) Debug(args ...interface{})                   {}
func (nl *NoopLog) Debugf(template string, args ...interface{}) {}
func (nl *NoopLog) Error(args ...interface{})                   {}
func (nl *NoopLog) Errorf(template string, args ...interface{}) {}
func (nl *NoopLog) Fatal(args ...interface{})                   {}
func (nl *NoopLog) Fatalf(template string, args ...interface{}) {}
func (nl *NoopLog) Info(args ...interface{})                    {}
func (nl *NoopLog) Infof(template string, args ...interface{})  {}
func (nl *NoopLog) Warn(args ...interface{})                    {}
func (nl *NoopLog) Warnf(template string, args ...interface{})  {}

// instance 默认实现，都是空实现，不包含任何打印操作
var instance Logger = &NoopLog{}

// 获取当前日志实例
func Get() Logger {
	return instance
}
