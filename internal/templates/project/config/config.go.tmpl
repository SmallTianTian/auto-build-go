package config

import (
    "log"
    "os"
    "strings"

    "github.com/spf13/viper"
)

var (
    DefaultConfig Config
)

type Config struct {
    Logger struct {
        Level string
        Env   string
    }
}

func InitConfig() *Config {
    // load config file
    viper.SetConfigName("config")
    viper.SetConfigType("yaml")
    viper.AddConfigPath(os.Getenv("CONFIG_PATH"))
    viper.AddConfigPath("config")
    viper.AddConfigPath(".")

    err := viper.ReadInConfig()
    if err != nil {
        log.Fatal("Read config failed.", err)
    }
    // bind config value from env
    viper.SetEnvPrefix("{{.projectName}}")
    viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
    viper.AutomaticEnv()

    if err := viper.Unmarshal(&DefaultConfig); err != nil {
        log.Fatal("Init config failed.", err)
    }
    log.Println("Use config:", viper.ConfigFileUsed())
    return &DefaultConfig
}

func GetConfig() *Config {
    return &DefaultConfig
}