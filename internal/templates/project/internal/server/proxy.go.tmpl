package server

import (
	"context"
	"fmt"

	"{{.module}}/internal/conf"
	"{{.module}}/pkg/logger"
	"{{.module}}/pkg/errors"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/protobuf/encoding/protojson"
)

func registEachProxy(ctx context.Context, mux *runtime.ServeMux, port string, opts []grpc.DialOption) []error {
	return []error{
	}
}

func GetProxy(config *conf.Config) *runtime.ServeMux {
	mux := runtime.NewServeMux(
		errors.GRPCHandler(),
		runtime.WithMarshalerOption(runtime.MIMEWildcard, &runtime.JSONPb{
			MarshalOptions: protojson.MarshalOptions{
				EmitUnpopulated: true,
				UseEnumNumbers:  true,
				UseProtoNames:   true,
			},
			UnmarshalOptions: protojson.UnmarshalOptions{
				DiscardUnknown: true,
			},
		}),
	)

	var opts []grpc.DialOption

	if config.Certificate.ServerCert != "" && config.Certificate.ServerKey != "" {
		dcreds, err := credentials.NewClientTLSFromFile(config.Certificate.ServerCert, "")
		if err != nil {
			logger.Fatal("Init server cret failed.", err)
		}
		opts = append(opts, grpc.WithTransportCredentials(dcreds))
	} else {
		opts = append(opts, grpc.WithInsecure())
	}

	grpcPort := fmt.Sprintf(":%d", config.Port.GRPC)

	errs := registEachProxy(context.Background(), mux, grpcPort, opts)
	for _, err := range errs {
		if err != nil {
			logger.Fatal("Regist proxy failed.", err)
		}
	}
	return mux
}
