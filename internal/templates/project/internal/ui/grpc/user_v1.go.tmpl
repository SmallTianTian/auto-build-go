package grpc

import (
	"context"

	v1 "{{.module}}/api/user/v1"
	"{{.module}}/ent"
	"{{.module}}/internal/service"
	"go.uber.org/zap"
)

type V1UserService struct {
	v1.UnimplementedUserServiceServer

	srv service.UserService

	log *zap.Logger
}

func NewV1UserService(srv service.UserService, log *zap.Logger) *V1UserService {
	return &V1UserService{
		srv: srv,
		log: log,
	}
}

func (us *V1UserService) CreateUser(ctx context.Context, req *v1.CreateUserRequest) (*v1.CreateUserResponse, error) {
	u, err := us.srv.CreateUser(ctx, &ent.User{Name: req.Name})
	if err != nil {
		return nil, err
	}
	return &v1.CreateUserResponse{
		Id:   int64(u.ID),
		Name: u.Name,
	}, nil
}

func (us *V1UserService) DeleteUser(ctx context.Context, req *v1.DeleteUserRequest) (*v1.DeleteUserResponse, error) {
	if err := us.srv.DeleteUser(ctx, int(req.Id)); err != nil {
		return nil, err
	}
	return &v1.DeleteUserResponse{
		Success: true,
	}, nil
}

func (us *V1UserService) UpdateUser(ctx context.Context, req *v1.UpdateUserRequest) (*v1.UpdateUserResponse, error) {
	us.log.Info("param", zap.String("name", req.Name), zap.Int64("id", req.Id))
	_, err := us.srv.UpdateUser(ctx, &ent.User{
		ID:   int(req.Id),
		Name: req.Name,
	})
	if err != nil {
		return nil, err
	}
	return &v1.UpdateUserResponse{
		Success: true,
	}, nil
}

func (us *V1UserService) GetUser(ctx context.Context, req *v1.GetUserRequest) (*v1.GetUserResponse, error) {
	u, err := us.srv.GetUser(ctx, int(req.Id))
	if err != nil {
		return nil, err
	}
	return &v1.GetUserResponse{
		Id:   int64(u.ID),
		Name: u.Name,
	}, nil
}

func (us *V1UserService) ListUsers(ctx context.Context, req *v1.ListUsersRequest) (*v1.ListUsersResponse, error) {
	users, total, err := us.srv.ListUser(ctx, &ent.User{
		Name: req.Name,
	}, int(req.Limit), int(req.Offset))
	if err != nil {
		return nil, err
	}
	resp := &v1.ListUsersResponse{
		Total: int64(total),
	}

	for _, user := range users {
		resp.Rows = append(resp.Rows, &v1.GetUserResponse{
			Id:   int64(user.ID),
			Name: user.Name,
		})
	}
	return resp, nil
}
