package server

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"{{.module}}/config"
	"{{.module}}/pkg/logger"
	demo_proto "{{.module}}/ui/grpc/demo/proto"
	"google.golang.org/grpc"
)

func registProxy(ctx context.Context, mux *runtime.ServeMux, grpcPort string, opts []grpc.DialOption) {
	demo_proto.RegisterDemoHandlerFromEndpoint(ctx, mux, grpcPort, opts)
}

var ph *http.Server

func RunProxy() {
	mux := runtime.NewServeMux()
	opts := []grpc.DialOption{grpc.WithInsecure()}

	grpcPort := fmt.Sprintf(":%d", config.DefaultConfig.Port.Grpc)
	registProxy(context.Background(), mux, grpcPort, opts)

	addr := fmt.Sprintf(":%d", config.DefaultConfig.Port.Proxy)
	ph = &http.Server{Addr: addr, Handler: mux}

	go func() {
		logger.Info("GRPC proxy listen and server at", addr)
		if err := ph.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Error("Start grpc http failed.", err)
		}
	}()
}

func StopProxy() {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := ph.Shutdown(ctx); err != nil {
		logger.Error("GRPC proxy shutdown failed.", err)
	}
}
